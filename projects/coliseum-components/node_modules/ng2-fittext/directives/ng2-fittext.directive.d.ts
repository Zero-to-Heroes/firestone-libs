import { AfterViewChecked, AfterViewInit, ElementRef, EventEmitter, OnChanges, OnInit, Renderer2 } from '@angular/core';
import * as i0 from "@angular/core";
export declare class Ng2FittextDirective implements AfterViewInit, OnInit, OnChanges, AfterViewChecked {
    el: ElementRef<HTMLElement>;
    renderer: Renderer2;
    fittext: any;
    activateOnResize: boolean;
    container: HTMLElement;
    activateOnInputEvents: boolean;
    minFontSize: number;
    maxFontSize: number;
    useMaxFontSize: boolean;
    modelToWatch: any;
    fontSizeChanged: EventEmitter<number>;
    private fontSize;
    private speed;
    private done;
    constructor(el: ElementRef<HTMLElement>, renderer: Renderer2);
    setFontSize(fontSize: number): void;
    getFontSize(): number;
    calculateFontSize(fontSize: number, speed: number): number;
    checkOverflow(parent: HTMLElement, children: HTMLElement): boolean;
    hasXAxisOverflow(parent: HTMLElement, children: HTMLElement): boolean;
    hasYAxisOverflow(parent: HTMLElement, children: HTMLElement): boolean;
    onResize(event: Event): void;
    onInputEvents(event: Event): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnChanges(changes: any): void;
    ngAfterViewChecked(): void;
    getStartFontSizeFromHeight(): number;
    private getStartFontSizeFromWeight;
    isDone(): boolean;
    isVisible(): boolean;
    hasOverflow(): boolean;
    static ɵfac: i0.ɵɵFactoryDeclaration<Ng2FittextDirective, never>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<Ng2FittextDirective, "[fittext]", never, { "fittext": "fittext"; "activateOnResize": "activateOnResize"; "container": "container"; "activateOnInputEvents": "activateOnInputEvents"; "minFontSize": "minFontSize"; "maxFontSize": "maxFontSize"; "useMaxFontSize": "useMaxFontSize"; "modelToWatch": "modelToWatch"; }, { "fontSizeChanged": "fontSizeChanged"; }, never>;
}
